name: Trigger AdHoc Alpha Build
on:
  workflow_dispatch:

jobs:
  trigger-adhoc-alpha-build:
    if: startsWith(github.ref, 'refs/heads/')
    env:
      repo: ${{ github.repository }}
      github_token: ${{ secrets.GH_TOKEN_FOR_TAGS }}
    runs-on: macos-12

    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version-file: '.python-version'
          cache: 'pip'

      - name: Setup environment
        run: |
          Scripts/setenv.sh

      - name: Set PYTHONPATH
        run: |
          echo "PYTHONPATH=${{ github.workspace }}/Scripts/tt_cicd_utils" >> ${GITHUB_ENV}

      - name: Set Head Branch
        id: set_head_branch
        run: echo "head_branch=${GITHUB_REF/refs\/heads\//}" >> ${GITHUB_OUTPUT}

      - name: Get last commit hash on head branch
        id: commit_hash
        env:
          head_branch: ${{ steps.set_head_branch.outputs.head_branch }}
        run: |
          import os
          import tt_cicd_utils as tt

          repo = os.environ['repo']
          head_branch = os.environ['head_branch']
          commit_hash = tt.get_last_commit_sha(branch = head_branch)

          with open(os.environ['GITHUB_OUTPUT'], 'a') as github_output_file:
            print(f"commit_hash={commit_hash}", file = github_output_file)
          print(f"commit_hash = {commit_hash}")
        shell: python3 {0}

      - name: Version
        id: version
        env:
          head_branch: ${{ steps.set_head_branch.outputs.head_branch }}
          release_branch_pattern: release/v.*
          main_branch_pattern: main
        run: |
          import os
          import tt_cicd_utils as tt

          repo = os.environ['repo']
          github_token = os.environ['github_token']
          head_branch = os.environ['head_branch']
          release_branch_pattern = os.environ['release_branch_pattern']
          main_branch_pattern = os.environ['main_branch_pattern']
          
          print(f"repo = {repo}")
          print(f"github_token = {github_token}")
          print(f"head_branch = {head_branch}")
          print(f"release_branch_pattern = {release_branch_pattern}")
          print(f"main_branch_pattern = {main_branch_pattern}")

          bearer_auth = tt.HTTPBearerAuth(github_token)
          pull_request = tt.fetch_latest_pull_request(repo = repo,
                                                      pull_request_state = tt.PullRequestState.OPEN,
                                                      head_branch = head_branch,
                                                      release_branch_pattern = release_branch_pattern,
                                                      main_branch_pattern = main_branch_pattern,
                                                      auth = bearer_auth)
          pull_request_head_ref = pull_request['head']['ref']
          latest_version_tag = tt.get_latest_version_tag(branch = pull_request_head_ref)

          pull_request_number = int(pull_request['number'])
          semver = tt.SemanticVersion(version = latest_version_tag)
          semver.patch = pull_request_number

          with open(os.environ['GITHUB_OUTPUT'], 'a') as github_output_file:
            print(f"version={semver}", file = github_output_file)
            print(f"version = {semver}")
        shell: python3 {0}

      - name: Label pull request with version
        env:
          version: ${{ steps.version.outputs.version }}
        run: |
          import os
          import tt_cicd_utils as tt

          repo = os.environ['repo']
          version = os.environ['version']
          semver = tt.SemanticVersion(version = version)
          pull_request_number = semver.patch
          label = f"testflight-alpha-{version}"
          github_token = os.environ['github_token']
          bearer_auth = tt.HTTPBearerAuth(github_token)
          tt.add_labels_to_pull_request(repo = repo, pull_request_number = pull_request_number, labels = [label], auth = bearer_auth)
        shell: python3 {0}

      - name: Create alpha build
        env:
          commit_hash: ${{ steps.commit_hash.outputs.commit_hash }}
          version: ${{ steps.version.outputs.version }}
        run: |
          curl -L -X POST \
          -H "Accept: application/vnd.github+json" \
          -H "Authorization: Bearer ${{ env.github_token }}" \
          -H "X-GitHub-Api-Version: 2022-11-28" \
          https://api.github.com/repos/${{ env.repo }}/dispatches \
          -d '{"event_type":"create-alpha-build","client_payload":{"commit_hash":"${{ env.commit_hash }}","version":"${{ env.version }}"}}'

      - name: Cleanup
        if: always()
        uses: ./.github/actions/cleanup
